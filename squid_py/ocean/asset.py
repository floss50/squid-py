import hashlib
import json
import logging
import re

from squid_py.ddo import DDO
from squid_py.ocean.ocean_base import OceanBase
from squid_py.did import get_id_from_did


class Asset:
    def __init__(self, asset_id=None, publisher_id=None, price=None, ddo=None):
        """
        Represent an asset in the MetaData store

        Constructor methods:
            1. Direct instantiation Asset(**kwargs)
                - Use this method to manually build an asset
            2. From a json DDO file Asset.from_ddo_json_file()
                - Create an asset based on a DDO file
            3. From a dict object.
                - Create an asset based in a dict file.

        :param asset_id: AKA the DID. This is generated by the market contract, on chain!
        :param publisher_id:
        :param price:
        :param ddo: DDO instance
        """

        self.asset_id = asset_id
        self.publisher_id = publisher_id
        self.price = price
        self._ddo = ddo
        if self._ddo and self._ddo.is_valid:
            self.asset_id = get_id_from_did(self._ddo.did)


    @property
    def did(self):
        """return the DID for this asset"""
        if not self._ddo:
            raise AttributeError("No DDO object in {}".format(self))
        if not self._ddo.is_valid:
            raise ValueError("Invalid DDO object in {}".format(self))

        return self._ddo.did

    @property
    def ddo(self):
        return self._ddo

    @classmethod
    def from_ddo_json_file(cls, json_file_path):
        this_asset = cls(ddo=DDO(json_filename=json_file_path))
        logging.debug("Asset {} created from ddo file {} ".format(this_asset.asset_id, json_file_path))
        return this_asset

    @classmethod
    def from_ddo_dict(cls, dictionary):
        this_asset = cls(ddo = DDO(dictionary=dictionary))
        logging.debug("Asset {} created from ddo dict {} ".format(this_asset.asset_id, dictionary))
        return this_asset

    @property
    def metadata(self):
        assert self.has_metadata
        return self._get_metadata()

    @property
    def has_metadata(self):
        return not self._get_metadata() is None

    def _get_metadata(self):
        result = None
        metadata_service = self._ddo.get_service('Metadata')
        if metadata_service:
            values = metadata_service.get_values()
            if 'metadata' in values:
                result = values['metadata']
        return result

    def is_valid_did(self, length=64):
        """The Asset.asset_id must conform to the specification"""
        return len(self.asset_id) == length

    def generate_did(self):
        """
        During development, the DID can be generated here for convenience.
        """
        if not self._ddo:
            raise AttributeError("No DDO object in {}".format(self))
        if not self._ddo.is_valid:
            raise ValueError("Invalid DDO object in {}".format(self))

        metadata = self._get_metadata()
        if not metadata:
            raise ValueError("No metedata in {}".format(self))

        if not 'base' in metadata:
            raise ValueError("Invalid metedata in {}".format(self))

        self.asset_id = hashlib.sha256(json.dumps(metadata['base']).encode('utf-8')).hexdigest()

    def assign_metadata(self):
        pass

    def purchase(self, consumer, timeout):
        """
        Generate an order for purchase of this Asset

        :param timeout:
        :param consumer: Account object of the requester
        :return: Order object
        """
        # Check if asset exists

        # Approve the token transfer

        # Submit access request

        return

    def consume(self, order, consumer):
        """

        :param order: Order object
        :param consumer: Consumer Account
        :return: access_url
        :rtype: string
        :raises :
        """

        # Get access token (jwt)

        # Download the asset from the aquarius using the URL in access token
        # Decode the the access token, get service_endpoint and request_id

        return

    def get_service_agreements(self):
        pass

    def __str__(self):
        return "Asset {}, price: {}, publisher: {}".format(self.asset_id, self.price, self.publisher_id)
